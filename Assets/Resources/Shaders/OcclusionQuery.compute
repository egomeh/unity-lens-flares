#pragma kernel Query

static const float PI = 3.14159265f;

float4 _LightPosition;
float _DepthThreashold;
float _SampleRadius;
float _NumberOfSamples;

Texture2D<float> _CameraDepthTexture : register(t0);
SamplerState sampler_CameraDepthTexture;
float4 _DepthTextureDimensions;

RWStructuredBuffer<uint> _Visibility : register(u0);
RWTexture2D<float4> _DebugTexture : register(u1);

float rand(float seed)
{
    return frac(sin(dot(seed, 12.9898)) * 43758.5453);
}

[numthreads(1, 1, 1)]
void Query(uint dispatchThreadId : SV_DispatchThreadID, uint groupThreadId : SV_GroupThreadID)
{
    const uint threadID = dispatchThreadId;

    float2 lightTexcoord = _LightPosition.xy * .5 + .5;

    float sampleLength = sqrt(rand(threadID) * _SampleRadius);
    float sampleAngle = rand(threadID * 7.) * 2. * PI;

    float2 sampleOffset = float2(cos(sampleAngle), -sin(sampleAngle)) * sampleLength;
    sampleOffset.x *= _DepthTextureDimensions.y / _DepthTextureDimensions.x;
    sampleOffset += lightTexcoord;

    float depth = _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, sampleOffset, 0);
    uint visible = step(depth, _DepthThreashold);

    uint2 sampleOffsetPixel = sampleOffset.xy * _DepthTextureDimensions.xy;

    _DebugTexture[sampleOffsetPixel] = float4(1. - visible, visible, 0., 1.);

    InterlockedAdd(_Visibility[0u], visible);
}
